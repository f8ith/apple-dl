/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/am/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search */
        get: operations["search_api_v1_am_search_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/am/album": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Album */
        get: operations["album_api_v1_am_album_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/discord/player_state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Player State */
        get: operations["player_state_api_v1_discord_player_state_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/discord/play_pause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Play Pause */
        put: operations["play_pause_api_v1_discord_play_pause_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/discord/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Resume */
        put: operations["resume_api_v1_discord_resume_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/discord/pause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Pause */
        put: operations["pause_api_v1_discord_pause_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/discord/loop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Loop */
        put: operations["loop_api_v1_discord_loop_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/discord/repeat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Repeat */
        put: operations["repeat_api_v1_discord_repeat_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/discord/volume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Volume */
        put: operations["volume_api_v1_discord_volume_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/discord/seek": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Seek */
        put: operations["seek_api_v1_discord_seek_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/discord/play_next": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Play Next */
        put: operations["play_next_api_v1_discord_play_next_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/discord/play_later": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Play Later */
        put: operations["play_later_api_v1_discord_play_later_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/discord/remove_song": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove Song */
        delete: operations["remove_song_api_v1_discord_remove_song_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/discord/skip": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Skip */
        put: operations["skip_api_v1_discord_skip_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/discord/disconnect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Disconnect */
        put: operations["disconnect_api_v1_discord_disconnect_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/discord/queue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Queue */
        get: operations["get_queue_api_v1_discord_queue_get"];
        /** Post Queue */
        put: operations["post_queue_api_v1_discord_queue_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/discord/check_state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check State */
        get: operations["check_state_api_v1_discord_check_state_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/submit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit Job */
        post: operations["submit_job_api_v1_jobs_submit_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Jobs */
        get: operations["get_jobs_api_v1_jobs_all_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AMAlbum */
        AMAlbum: {
            /** Id */
            id?: string | null;
            /** Type */
            type?: string | null;
            /** Href */
            href: string;
            attributes?: components["schemas"]["AMAlbumAttributes"] | null;
            relationships?: components["schemas"]["AMRelationships"] | null;
        };
        /** AMAlbumAttributes */
        AMAlbumAttributes: {
            /** Artistname */
            artistName: string;
            artwork?: components["schemas"]["AMArtwork"] | null;
            /**
             * Audiotraits
             * @default []
             */
            audioTraits: string[];
            /** Copyright */
            copyright: string;
            /**
             * Genrenames
             * @default []
             */
            genreNames: string[];
            /** Iscompilation */
            isCompilation: boolean;
            /** Iscomplete */
            isComplete: boolean;
            /** Ismasteredforitunes */
            isMasteredForItunes: boolean;
            /** Isprerelease */
            isPrerelease: boolean;
            /** Issingle */
            isSingle: boolean;
            /** Name */
            name: string;
            playParams: components["schemas"]["PlayParams"];
            /** Recordlabel */
            recordLabel: string;
            /** Releasedate */
            releaseDate: string;
            /** Trackcount */
            trackCount: number;
            /** Upc */
            upc: string;
            /** Url */
            url: string;
        };
        /** AMAlbums */
        AMAlbums: {
            /** Href */
            href: string;
            /** Next */
            next?: string | null;
            /** Data */
            data: components["schemas"]["AMAlbum"][];
        };
        /** AMArtist */
        AMArtist: {
            /** Id */
            id?: string | null;
            /** Type */
            type?: string | null;
            /** Href */
            href: string;
            attributes?: components["schemas"]["AMArtistAttributes"] | null;
            relationships?: components["schemas"]["AMArtistRelationships"] | null;
        };
        /** AMArtistAttributes */
        AMArtistAttributes: {
            artwork?: components["schemas"]["AMArtwork"] | null;
            /** Genrenames */
            genreNames: string[];
            /** Name */
            name: string;
            /** Url */
            url: string;
        };
        /** AMArtistRelationships */
        AMArtistRelationships: {
            albums: components["schemas"]["AMAlbum"];
        };
        /** AMArtists */
        AMArtists: {
            /** Href */
            href: string;
            /** Next */
            next?: string | null;
            /**
             * Data
             * @default []
             */
            data: components["schemas"]["AMArtist"][];
        };
        /** AMArtwork */
        AMArtwork: {
            /** Bgcolor */
            bgColor: string;
            /** Hasp3 */
            hasP3: boolean;
            /** Height */
            height: number;
            /** Textcolor1 */
            textColor1: string;
            /** Textcolor2 */
            textColor2: string;
            /** Textcolor3 */
            textColor3: string;
            /** Textcolor4 */
            textColor4: string;
            /** Url */
            url: string;
            /** Width */
            width: number;
        };
        /** AMPlaylist */
        AMPlaylist: {
            /** Id */
            id?: string | null;
            /** Type */
            type?: string | null;
            /** Href */
            href: string;
            attributes: components["schemas"]["AMPlaylistAttributes"];
        };
        /** AMPlaylistAttributes */
        AMPlaylistAttributes: {
            artwork?: components["schemas"]["AMArtwork"] | null;
            /**
             * Audiotraits
             * @default []
             */
            audioTraits: string[];
            /** Curatorname */
            curatorName: string;
            description?: components["schemas"]["Description"] | null;
            editorialNotes?: components["schemas"]["EditorialNotes"] | null;
            /** Editorialplaylistkind */
            editorialPlaylistKind: string;
            /** Hascollaboration */
            hasCollaboration: boolean;
            /** Ischart */
            isChart: boolean;
            /** Lastmodifieddate */
            lastModifiedDate: string;
            /** Name */
            name: string;
            playParams: components["schemas"]["PlayParams"];
            /** Playlisttype */
            playlistType: string;
            /** Supportssing */
            supportsSing: boolean;
            /** Url */
            url: string;
        };
        /** AMPlaylists */
        AMPlaylists: {
            /** Href */
            href: string;
            /** Next */
            next?: string | null;
            /** Data */
            data: components["schemas"]["AMPlaylist"][];
        };
        /** AMRelationships */
        AMRelationships: {
            artists: components["schemas"]["AMArtists"];
            tracks: components["schemas"]["AMSongs"];
        };
        /** AMSearchResp */
        AMSearchResp: {
            albums?: components["schemas"]["AMAlbums"] | null;
            artists?: components["schemas"]["AMArtists"] | null;
            playlists?: components["schemas"]["AMPlaylists"] | null;
            songs?: components["schemas"]["AMSongs"] | null;
            /** Offset */
            offset?: number | null;
        };
        /** AMSong */
        AMSong: {
            /** Id */
            id?: string | null;
            /** Type */
            type?: string | null;
            /** Href */
            href: string;
            attributes: components["schemas"]["AMSongAttributes"];
        };
        /** AMSongAttributes */
        AMSongAttributes: {
            /** Albumname */
            albumName: string;
            /** Artistname */
            artistName: string;
            artwork?: components["schemas"]["AMArtwork"] | null;
            /** Audiolocale */
            audioLocale: string;
            /**
             * Audiotraits
             * @default []
             */
            audioTraits: string[];
            /** Composername */
            composerName: string;
            /** Discnumber */
            discNumber: number;
            /** Durationinmillis */
            durationInMillis: number;
            extendedAssetUrls?: components["schemas"]["ExtendedAssetUrls"] | null;
            /** Genrenames */
            genreNames: string[];
            /** Haslyrics */
            hasLyrics: boolean;
            /** Hastimesyncedlyrics */
            hasTimeSyncedLyrics: boolean;
            /** Isappledigitalmaster */
            isAppleDigitalMaster: boolean;
            /** Ismasteredforitunes */
            isMasteredForItunes: boolean;
            /** Isvocalattenuationallowed */
            isVocalAttenuationAllowed: boolean;
            /** Isrc */
            isrc: string;
            /** Name */
            name: string;
            playParams: components["schemas"]["PlayParams"];
            /**
             * Previews
             * @default []
             */
            previews: components["schemas"]["Preview"][];
            /** Releasedate */
            releaseDate: string;
            /** Tracknumber */
            trackNumber: number;
            /** Url */
            url: string;
        };
        /** AMSongs */
        AMSongs: {
            /** Href */
            href: string;
            /** Next */
            next?: string | null;
            /**
             * Data
             * @default []
             */
            data: components["schemas"]["AMSong"][];
        };
        /** Description */
        Description: {
            /** Standard */
            standard: string;
        };
        /**
         * DiscordPlayerModes
         * @enum {string}
         */
        DiscordPlayerModes: "normal" | "repeat" | "loop";
        /** EditorialNotes */
        EditorialNotes: {
            /** Name */
            name: string | null;
            /** Short */
            short: string;
            /** Standard */
            standard: string;
        };
        /** ExtendedAssetUrls */
        ExtendedAssetUrls: {
            /** Enhancedhls */
            enhancedHls: string;
            /** Lightweight */
            lightweight: string;
            /** Lightweightplus */
            lightweightPlus: string;
            /** Plus */
            plus: string;
            /** Superlightweight */
            superLightweight: string;
        };
        /** GamdlJobSchema */
        GamdlJobSchema: {
            /** Id */
            id: number;
            /** Album Name */
            album_name: string | null;
            /** Artist Name */
            artist_name: string | null;
            /** Name */
            name: string;
            /** Attributes */
            attributes: {
                [key: string]: unknown;
            };
            /** Url */
            url: string;
            /** Image */
            image: string | null;
            /** Type */
            type: string;
            /** Status */
            status: string;
            /** Error */
            error: string | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** JobReq */
        JobReq: {
            /** Url */
            url: string;
        };
        /** PlayParams */
        PlayParams: {
            /** Id */
            id: string;
            /** Kind */
            kind: string;
            /** Versionhash */
            versionHash?: string | null;
        };
        /** PlayerStateSchema */
        PlayerStateSchema: {
            /** Guild Name */
            guild_name: string;
            /** Channel Name */
            channel_name: string;
            current_song: components["schemas"]["SongSchema"] | null;
            /** Song Length */
            song_length: number | null;
            /** Song Played */
            song_played: number | null;
            /** Is Paused */
            is_paused: boolean;
            /** Volume */
            volume: number;
            mode: components["schemas"]["DiscordPlayerModes"];
            /** Owner Name */
            owner_name: string;
        };
        /** Preview */
        Preview: {
            /** Url */
            url: string;
        };
        /** SeekReq */
        SeekReq: {
            /** Seek Time */
            seek_time: number;
        };
        /** SongReq */
        SongReq: {
            /** Id */
            id: number;
        };
        /** SongSchema */
        SongSchema: {
            /** Id */
            id: number;
            /** Album Name */
            album_name: string;
            /** Artist Name */
            artist_name: string;
            /** Name */
            name: string;
            /** Url */
            url: string;
            /** Image */
            image: string;
            /** Length */
            length: number;
            /** Lyrics */
            lyrics: string;
            /** Synced Lyrics */
            synced_lyrics: string;
        };
        /** ValidPlayerStateResp */
        ValidPlayerStateResp: {
            /** Valid */
            valid: boolean;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** VolumeReq */
        VolumeReq: {
            /** Volume */
            volume: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    search_api_v1_am_search_get: {
        parameters: {
            query: {
                term: string;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": ("songs" | "albums" | "artists" | "playlists")[];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AMSearchResp"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    album_api_v1_am_album_get: {
        parameters: {
            query: {
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AMAlbum"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    player_state_api_v1_discord_player_state_get: {
        parameters: {
            query?: never;
            header: {
                "player-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerStateSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    play_pause_api_v1_discord_play_pause_put: {
        parameters: {
            query?: never;
            header: {
                "player-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    resume_api_v1_discord_resume_put: {
        parameters: {
            query?: never;
            header: {
                "player-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    pause_api_v1_discord_pause_put: {
        parameters: {
            query?: never;
            header: {
                "player-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    loop_api_v1_discord_loop_put: {
        parameters: {
            query?: never;
            header: {
                "player-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    repeat_api_v1_discord_repeat_put: {
        parameters: {
            query?: never;
            header: {
                "player-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    volume_api_v1_discord_volume_put: {
        parameters: {
            query?: never;
            header: {
                "player-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VolumeReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    seek_api_v1_discord_seek_put: {
        parameters: {
            query?: never;
            header: {
                "player-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SeekReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    play_next_api_v1_discord_play_next_put: {
        parameters: {
            query?: never;
            header: {
                "player-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SongReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    play_later_api_v1_discord_play_later_put: {
        parameters: {
            query?: never;
            header: {
                "player-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SongReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_song_api_v1_discord_remove_song_delete: {
        parameters: {
            query?: never;
            header: {
                "player-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SongReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    skip_api_v1_discord_skip_put: {
        parameters: {
            query?: never;
            header: {
                "player-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    disconnect_api_v1_discord_disconnect_put: {
        parameters: {
            query?: never;
            header: {
                "player-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_queue_api_v1_discord_queue_get: {
        parameters: {
            query?: never;
            header: {
                "player-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SongSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_queue_api_v1_discord_queue_put: {
        parameters: {
            query?: never;
            header: {
                "player-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JobReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    check_state_api_v1_discord_check_state_get: {
        parameters: {
            query?: never;
            header: {
                "player-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidPlayerStateResp"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    submit_job_api_v1_jobs_submit_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JobReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_jobs_api_v1_jobs_all_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GamdlJobSchema"][];
                };
            };
        };
    };
}
