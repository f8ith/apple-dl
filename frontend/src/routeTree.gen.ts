/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as JobsRouteImport } from './routes/jobs'
import { Route as DiscordBotRouteImport } from './routes/discord-bot'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SearchTermRouteImport } from './routes/search.$term'
import { Route as PlaylistPlaylistIdRouteImport } from './routes/playlist.$playlistId'
import { Route as ArtistArtistIdRouteImport } from './routes/artist.$artistId'
import { Route as AlbumAlbumIdRouteImport } from './routes/album.$albumId'
import { Route as SearchTermSongsRouteImport } from './routes/search_.$term.songs'
import { Route as SearchTermPlaylistsRouteImport } from './routes/search_.$term.playlists'
import { Route as SearchTermArtistsRouteImport } from './routes/search_.$term.artists'
import { Route as SearchTermAlbumsRouteImport } from './routes/search_.$term.albums'

const JobsRoute = JobsRouteImport.update({
  id: '/jobs',
  path: '/jobs',
  getParentRoute: () => rootRouteImport,
} as any)
const DiscordBotRoute = DiscordBotRouteImport.update({
  id: '/discord-bot',
  path: '/discord-bot',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchTermRoute = SearchTermRouteImport.update({
  id: '/search/$term',
  path: '/search/$term',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaylistPlaylistIdRoute = PlaylistPlaylistIdRouteImport.update({
  id: '/playlist/$playlistId',
  path: '/playlist/$playlistId',
  getParentRoute: () => rootRouteImport,
} as any)
const ArtistArtistIdRoute = ArtistArtistIdRouteImport.update({
  id: '/artist/$artistId',
  path: '/artist/$artistId',
  getParentRoute: () => rootRouteImport,
} as any)
const AlbumAlbumIdRoute = AlbumAlbumIdRouteImport.update({
  id: '/album/$albumId',
  path: '/album/$albumId',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchTermSongsRoute = SearchTermSongsRouteImport.update({
  id: '/search_/$term/songs',
  path: '/search/$term/songs',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchTermPlaylistsRoute = SearchTermPlaylistsRouteImport.update({
  id: '/search_/$term/playlists',
  path: '/search/$term/playlists',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchTermArtistsRoute = SearchTermArtistsRouteImport.update({
  id: '/search_/$term/artists',
  path: '/search/$term/artists',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchTermAlbumsRoute = SearchTermAlbumsRouteImport.update({
  id: '/search_/$term/albums',
  path: '/search/$term/albums',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/discord-bot': typeof DiscordBotRoute
  '/jobs': typeof JobsRoute
  '/album/$albumId': typeof AlbumAlbumIdRoute
  '/artist/$artistId': typeof ArtistArtistIdRoute
  '/playlist/$playlistId': typeof PlaylistPlaylistIdRoute
  '/search/$term': typeof SearchTermRoute
  '/search/$term/albums': typeof SearchTermAlbumsRoute
  '/search/$term/artists': typeof SearchTermArtistsRoute
  '/search/$term/playlists': typeof SearchTermPlaylistsRoute
  '/search/$term/songs': typeof SearchTermSongsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/discord-bot': typeof DiscordBotRoute
  '/jobs': typeof JobsRoute
  '/album/$albumId': typeof AlbumAlbumIdRoute
  '/artist/$artistId': typeof ArtistArtistIdRoute
  '/playlist/$playlistId': typeof PlaylistPlaylistIdRoute
  '/search/$term': typeof SearchTermRoute
  '/search/$term/albums': typeof SearchTermAlbumsRoute
  '/search/$term/artists': typeof SearchTermArtistsRoute
  '/search/$term/playlists': typeof SearchTermPlaylistsRoute
  '/search/$term/songs': typeof SearchTermSongsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/discord-bot': typeof DiscordBotRoute
  '/jobs': typeof JobsRoute
  '/album/$albumId': typeof AlbumAlbumIdRoute
  '/artist/$artistId': typeof ArtistArtistIdRoute
  '/playlist/$playlistId': typeof PlaylistPlaylistIdRoute
  '/search/$term': typeof SearchTermRoute
  '/search_/$term/albums': typeof SearchTermAlbumsRoute
  '/search_/$term/artists': typeof SearchTermArtistsRoute
  '/search_/$term/playlists': typeof SearchTermPlaylistsRoute
  '/search_/$term/songs': typeof SearchTermSongsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/discord-bot'
    | '/jobs'
    | '/album/$albumId'
    | '/artist/$artistId'
    | '/playlist/$playlistId'
    | '/search/$term'
    | '/search/$term/albums'
    | '/search/$term/artists'
    | '/search/$term/playlists'
    | '/search/$term/songs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/discord-bot'
    | '/jobs'
    | '/album/$albumId'
    | '/artist/$artistId'
    | '/playlist/$playlistId'
    | '/search/$term'
    | '/search/$term/albums'
    | '/search/$term/artists'
    | '/search/$term/playlists'
    | '/search/$term/songs'
  id:
    | '__root__'
    | '/'
    | '/discord-bot'
    | '/jobs'
    | '/album/$albumId'
    | '/artist/$artistId'
    | '/playlist/$playlistId'
    | '/search/$term'
    | '/search_/$term/albums'
    | '/search_/$term/artists'
    | '/search_/$term/playlists'
    | '/search_/$term/songs'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DiscordBotRoute: typeof DiscordBotRoute
  JobsRoute: typeof JobsRoute
  AlbumAlbumIdRoute: typeof AlbumAlbumIdRoute
  ArtistArtistIdRoute: typeof ArtistArtistIdRoute
  PlaylistPlaylistIdRoute: typeof PlaylistPlaylistIdRoute
  SearchTermRoute: typeof SearchTermRoute
  SearchTermAlbumsRoute: typeof SearchTermAlbumsRoute
  SearchTermArtistsRoute: typeof SearchTermArtistsRoute
  SearchTermPlaylistsRoute: typeof SearchTermPlaylistsRoute
  SearchTermSongsRoute: typeof SearchTermSongsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/jobs': {
      id: '/jobs'
      path: '/jobs'
      fullPath: '/jobs'
      preLoaderRoute: typeof JobsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/discord-bot': {
      id: '/discord-bot'
      path: '/discord-bot'
      fullPath: '/discord-bot'
      preLoaderRoute: typeof DiscordBotRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search/$term': {
      id: '/search/$term'
      path: '/search/$term'
      fullPath: '/search/$term'
      preLoaderRoute: typeof SearchTermRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/playlist/$playlistId': {
      id: '/playlist/$playlistId'
      path: '/playlist/$playlistId'
      fullPath: '/playlist/$playlistId'
      preLoaderRoute: typeof PlaylistPlaylistIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/artist/$artistId': {
      id: '/artist/$artistId'
      path: '/artist/$artistId'
      fullPath: '/artist/$artistId'
      preLoaderRoute: typeof ArtistArtistIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/album/$albumId': {
      id: '/album/$albumId'
      path: '/album/$albumId'
      fullPath: '/album/$albumId'
      preLoaderRoute: typeof AlbumAlbumIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search_/$term/songs': {
      id: '/search_/$term/songs'
      path: '/search/$term/songs'
      fullPath: '/search/$term/songs'
      preLoaderRoute: typeof SearchTermSongsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search_/$term/playlists': {
      id: '/search_/$term/playlists'
      path: '/search/$term/playlists'
      fullPath: '/search/$term/playlists'
      preLoaderRoute: typeof SearchTermPlaylistsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search_/$term/artists': {
      id: '/search_/$term/artists'
      path: '/search/$term/artists'
      fullPath: '/search/$term/artists'
      preLoaderRoute: typeof SearchTermArtistsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search_/$term/albums': {
      id: '/search_/$term/albums'
      path: '/search/$term/albums'
      fullPath: '/search/$term/albums'
      preLoaderRoute: typeof SearchTermAlbumsRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DiscordBotRoute: DiscordBotRoute,
  JobsRoute: JobsRoute,
  AlbumAlbumIdRoute: AlbumAlbumIdRoute,
  ArtistArtistIdRoute: ArtistArtistIdRoute,
  PlaylistPlaylistIdRoute: PlaylistPlaylistIdRoute,
  SearchTermRoute: SearchTermRoute,
  SearchTermAlbumsRoute: SearchTermAlbumsRoute,
  SearchTermArtistsRoute: SearchTermArtistsRoute,
  SearchTermPlaylistsRoute: SearchTermPlaylistsRoute,
  SearchTermSongsRoute: SearchTermSongsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
